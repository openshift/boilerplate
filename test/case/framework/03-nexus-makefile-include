#!/usr/bin/env bash

set -e

sub_hdr() {
    cat <<EOF

>>>>
>>>> $@
>>>>

EOF
}

# Use this to silence "Entering/Leaving directory" messages when needing
# to compare output sanely
make_q='make --no-print-directory'

REPO_ROOT=$(git rev-parse --show-toplevel)

source $REPO_ROOT/test/lib.sh

# A temp directory for expected output/files
expected=$(mktemp -d)
add_cleanup $expected
cat <<EOF>$expected/nmi-header
# THIS FILE IS GENERATED BY BOILERPLATE. DO NOT EDIT.
# This file automatically includes any *.mk files in your subscribed
# conventions. Please ensure your base Makefile includes only this file.
include boilerplate/_lib/boilerplate.mk
EOF
exp_nmi=$expected/nmi

repo=$(empty_repo)
add_cleanup $repo

bootstrap_repo $repo

cd $repo

sub_hdr "Baseline"
make boilerplate-update
check_update $repo

sub_hdr "Include with no conventions"
# NOTE: We can't actually do this until we've updated at least once, to
# bootstrap the nexus Makefile include into our target repo. Is that a
# problem? The only way around it would be to touch that file along with
# the update.cfg when bootstrapping. But we'd like to minimize the
# number of things that need to be bootstrapped in that way.
ensure_nexus_makefile_include $repo
check_update $repo
# Nexus Makefile include should have only the header
diff $expected/nmi-header $NEXUS_MK

# So the next update starts "clean"
./boilerplate/_lib/boilerplate-commit

sub_hdr "Convention with no includes"
add_convention $repo test/nexus-makefile-include/no-includes
make boilerplate-update
check_update $repo
# Nexus Makefile include should have only the header
diff $expected/nmi-header $NEXUS_MK

# Set up a new repo
repo=$(empty_repo)
add_cleanup $repo
bootstrap_repo $repo
cd $repo

sub_hdr "Convention with one include"
convention=test/nexus-makefile-include/one-include
add_convention $repo $convention
make boilerplate-update
check_update $repo
cat $expected/nmi-header > $exp_nmi
/bin/echo "include boilerplate/$convention/one.mk" >> $exp_nmi
diff $exp_nmi $NEXUS_MK
# Our base Makefile doesn't include the nmi yet
if make one-one 2>/dev/null; then
    echo "Didn't expect the 'one-one' make target to resolve yet."
    exit 1
fi
# Now include it and the target should work
ensure_nexus_makefile_include $repo
/bin/echo "one-one" > $expected/expected-out
$make_q one-one > $expected/actual-out
diff $expected/expected-out $expected/actual-out

# Set up a new repo
repo=$(empty_repo)
add_cleanup $repo
bootstrap_repo $repo
cd $repo

sub_hdr "Convention with multiple includes"
convention=test/nexus-makefile-include/multiple-includes
add_convention $repo $convention
make boilerplate-update
check_update $repo
cat $expected/nmi-header > $exp_nmi
# NOTE: These are added in lexical sort order!
cat <<EOF >> $exp_nmi
include boilerplate/$convention/one.mk
include boilerplate/$convention/three.mk
include boilerplate/$convention/two.mk
EOF
diff $exp_nmi $NEXUS_MK
ensure_nexus_makefile_include $repo
/bin/echo "mult-one" > $expected/expected-out
$make_q mult-one > $expected/actual-out
diff $expected/expected-out $expected/actual-out

# Reset Makefile and config
./boilerplate/_lib/boilerplate-commit
bootstrap_repo $repo

sub_hdr "Multiple conventions"
for c in no-includes one-include multiple-includes; do
    add_convention $repo test/nexus-makefile-include/$c
done
make boilerplate-update
check_update $repo
cat $expected/nmi-header > $exp_nmi
# NOTE: The *convention* order is honored, even though the *includes*
# are sorted within a convention.
cat <<EOF >> $exp_nmi
include boilerplate/test/nexus-makefile-include/one-include/one.mk
include boilerplate/test/nexus-makefile-include/multiple-includes/one.mk
include boilerplate/test/nexus-makefile-include/multiple-includes/three.mk
include boilerplate/test/nexus-makefile-include/multiple-includes/two.mk
EOF
diff $exp_nmi $NEXUS_MK
ensure_nexus_makefile_include $repo
# Let's add a new target to our Makefile that requires all of the above
cat <<EOF >>Makefile

.PHONY: foo
foo: mult-two one-one mult-three mult-one
EOF
cat <<EOF > $expected/expected-out
mult-two
one-one
mult-three
mult-one
EOF
$make_q foo > $expected/actual-out
diff $expected/expected-out $expected/actual-out
