#!/usr/bin/env bash

set -e

REPO_ROOT="$(git rev-parse --show-toplevel)"

source "${REPO_ROOT}/test/lib.sh"

echo "Testing generators"
repo="$(empty_repo)"
add_cleanup "${repo}"
test_project="file-generate"

# Attempt to boilerplate the test project with the openshift/golang-osd-operator convention
bootstrap_project "${repo}" "${test_project}" openshift/golang-osd-operator
cd "${repo}"
make boilerplate-update
go mod download
export GOPATH=$GOPATH:`pwd`

# Generate files and check if the generated files matches the expected content
make generate

diff src/test/test.txt expected/test.txt || err "generate from src/test/test.go didn't work properly"
diff src/test/subfolder/test.txt expected/subfolder/test.txt || err "generate from src/test/subfolder/test.go didn't work properly"
if [[ ! -f api/v1beta1/zz_generated.deepcopy.go ]] ; then
    err "crd generate didn't work properly"
fi
if [[ ! -f api/v1beta1/zz_generated.openapi.go ]] ; then
    err "openapi generate didn't work properly"
fi

git add -A
git commit -m "commit generated files"

# Check are passing as all is committed
make generate-check

# Check detection of modified generated file
echo "Updating generated content" >> src/test/test.txt
git add -A
git commit -m "updating generated files"

make generate-check && err "make generate-check should have failed" || echo "Generated files have been updated manually. Checks failed as expected"

# Check detection of deleted generated file
git rm -f src/test/test.txt
git commit -m "deleting a generated files"

make generate-check && err "make generate-check should have failed" || echo "All generated files are not present. Checks failed as expected"

make generate
git add -A
git commit -m "Putting back all files"

make generate-check
